#!/bin/zsh
# vi:filetype=zsh
# vi:syntax=zsh

# Prepend to path avoiding duplicates
pathprepend() {
  local newdir=${1%/}
  if [ -d "${1}" ]; then
    PATH=$(ruby -e "path = ENV['PATH'].split(':'); path.delete('${1}'); path.prepend('${1}'); puts path.join(':')")
  fi
}

pathprepend "${HOME}/bin"
pathprepend "/opt/local/bin"
pathprepend "{{ brew_prefix }}/bin"
pathprepend "{{ brew_prefix }}/opt/curl/bin"
eval "$({{ brew_prefix }}/bin/brew shellenv)"

# use vim to edit files
export EDITOR=vim

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Make Tab autocomplete regardless of filename case
set completion-ignore-case on

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Use vim mode at the command line
set -o vi

# Print cheatsheet for a command
cheat() {
  curl cht.sh/"${1}"
}

# Check which process uses port
port() {
  lsof -i tcp:"${1}"
}

# Convenience functions for encrypting and decrypting files
encrypt() { gpg --symmetric "$1"; }
decrypt() { gpg -o "${1//\.enc/}" -d "$1"; }

# Use rg for FZF for speed and to respect .gitignore, .ignore
export FZF_DEFAULT_COMMAND='rg --files'

# Don't list vcs-ignored files when using Ctrl-T because it can be very slow and we probably don't want it most of the
# time
export FZF_CTRL_T_COMMAND='rg --files --ignore-vcs'

# make CTRL-R paste the current query when there's no match
export FZF_CTRL_R_OPTS='--bind enter:accept-or-print-query'

# Load any machine-specific customizations
if [ -f ~/.zshrc.local ]; then
  # shellcheck disable=SC1090
  . ~/.zshrc.local
fi

if type brew &>/dev/null; then
  chmod go-w "$(brew --prefix)/share"

  FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

  autoload -Uz compinit
  compinit
fi

# Search the current bundle
bgrep() {
  # shellcheck disable=SC2046
  rg "$@" $(bundle list --paths)
}

# Load SSH keys into the keychain - http://stackoverflow.com/a/39715149/961521
ssh-add -A 2>/dev/null;

# Install NVM
if [ -z "${NVM_DIR}" ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "{{ brew_prefix }}/opt/nvm/nvm.sh" ] && . "{{ brew_prefix }}/opt/nvm/nvm.sh"  # This loads nvm
  # shellcheck disable=SC1091
  [ -s "{{ brew_prefix }}/opt/nvm/etc/bash_completion" ] && . "{{ brew_prefix }}/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion
fi

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

  # Disable history expansion verification
  unsetopt histverify
fi

# Enable Ctrl-N and Ctrl-P to scroll command history
bindkey "^N" down-line-or-search
bindkey "^P" up-line-or-search


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Switch branches using fzf
alias b > /dev/null && unalias b
function b() {
  local branches branch
  branches=$(git --no-pager branch) &&
    branch=$(echo "$branches" | fzf +m) &&
    git checkout "$(echo "${branch}" | awk '{print $1}' | sed "s/.* //")"
  }

# Delete branches using fzf
alias db > /dev/null && unalias db
function db() {
  local branches branch
  branches=$(git --no-pager branch) &&
    branch=$(echo "$branches" | fzf +m) &&
    git branch -D "$(echo "${branch}" | awk '{print $1}' | sed "s/.* //")"
  }

# Run specs for changed files
function specs {
  setopt local_options BASH_REMATCH

  local app_regexp='^app(\/.*)\.rb$'
  local other_regexp='^([^\/]*)(\/.*)\.rb$'
  local spec_regexp='^spec\/.*\_spec\.rb$'
  local spec_files=()

  for file in $(git status --porcelain | awk '{print substr($0, 4)}'); do
    local spec_file=''
    if [[ $file =~ $spec_regexp ]]; then
      spec_file=$file
    elif [[ $file =~ $app_regexp ]]; then
      spec_file=spec${BASH_REMATCH[2]}_spec.rb
    elif [[ $file =~ $other_regexp ]]; then
      spec_file=spec/${BASH_REMATCH[2]}${BASH_REMATCH[3]}_spec.rb
    else
      echo "WARNING: unable to determine spec file for ${file}"
    fi

    # This checks to see if the spec file already
    # exists in the array
    if ((!$spec_files[(Ie)$spec_file])); then
      spec_files+=($spec_file)
    fi
  done

  local checked_files=()

  for spec_file in $spec_files; do
    if [[ -f "${spec_file}" ]]; then
      checked_files+=${spec_file}
    else
      echo "WARNING: ${spec_file} does not exist"
    fi
  done

  {% raw %}
  if grep --quiet parallel_tests Gemfile && [ ${#spec_files[@]} -gt 10 ]; then
    echo "Running ${#spec_files[@]} specs in parallel: ${checked_files}"

    # ${(j[|])checked_files} joins all elements in the array into a single string with a pipe (|)
    bin/rake parallel:prepare "parallel:spec[${(j[|])checked_files}]" RAILS_ENV=test
  elif [ ${#spec_files[@]} -gt 0 ]; then
    echo "Running ${#spec_files[@]} specs synchronously: ${checked_files}"

    bin/rspec $checked_files
  else
    echo "No spec files found, aborting"
  fi
  {% endraw %}
}

### Alias ###
# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
# Scan ports on a host
alias portscan="nmap -Pn -p1-65535"
# List TCP connections
alias lstcp="lsof -i TCP -P"
# Fix solarized theme in tmux
alias tmux="TERM=screen-256color-bce tmux"
# Shortcut for updating
alias update='ruby <(curl -fsSL https://raw.githubusercontent.com/f1sherman/new-machine-bootstrap/main/macos)'
# Shortcuts for committing
alias c='git commit'
alias ca='git commit --all'
alias cm='git commit --message'
alias cam='git commit --all --message'
alias am='git add . && git commit --amend --no-edit'
# Shortcut for viewing diffs
alias d='git d'
# Shortcut for pushing
alias p='git publish'
# Shortcut for git status
alias s='git status'
# Show Disk Use of subdirectories, sort by size
alias duss="du -d 1 -h | sort -hr | egrep -v ^0"
# Disable Pi-hole and Flush DNS
alias trackme="disable-pihole && sudo flushdns"
### End Alias ###

# Only initialize nodenv and rbenv here for non-login shells. For login shells, it will be
# initialized in zlogin
if [[ ! -o login ]]; then
  if command -v nodenv > /dev/null && [[ ":$PATH:" == *":nodenv:"* ]]; then echo "adding nodenv to path" && eval "$(nodenv init -)"; fi
  if command -v rbenv > /dev/null; then eval "$(rbenv init -)"; fi
fi
