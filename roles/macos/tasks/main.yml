---

- name: Bootstrap ssh config
  template:
    backup: yes
    force: no
    dest: '{{ ansible_env.HOME }}/.ssh/config'
    src: ssh/config
    mode: 0600
- name: Configure sshd
  lineinfile:
    backup: yes
    dest: /etc/ssh/sshd_config
    line: '{{ item.line }}'
    regexp: '{{ item.regexp }}'
  with_items:
    - { line: 'PermitRootLogin no', regexp: '^#?PermitRootLogin ' }
    - { line: 'PasswordAuthentication no', regexp: '^#?PasswordAuthentication ' }
    - { line: 'ChallengeResponseAuthentication no', regexp: '^#?ChallengeResponseAuthentication ' }
  become: true
- name: Enable sshd
  command: launchctl load -w /System/Library/LaunchDaemons/ssh.plist
  changed_when: false
  become: true
- name: Install XCode Command Line Tools
  command: xcode-select --install
  args:
    creates: /Library/Developer/CommandLineTools
- name: Setup log rotation
  template:
    backup: yes
    dest: /etc/newsyslog.d/projects.conf
    src: newsyslog/projects.conf
    owner: root
    mode: 0644
  become: true
- name: 'Install Brew packages'
  homebrew:
    name: ['asdf', 'cmake', 'curl-openssl', 'dark-mode', 'fzf', 'git', 'gnu-sed', 'gpg', 'hub', 'ncdu', 'nmap', 'python', 'reattach-to-user-namespace', 'rg', 'shellcheck', 'ssh-copy-id', 'tldr', 'tmux', 'tree', 'vim', 'wget', 'zsh']
    update_homebrew: yes
    upgrade_all: yes
- name: 'Remove Brew packages'
  homebrew:
    name: ['curl', 'nvm', 'rbenv', 'rbenv-bundler-ruby-version', 'rbenv-default-gems']
    state: absent
- name: 'Install Brew casks'
  homebrew_cask:
    name: ['bitwarden', 'brave-browser', 'charles', 'firefox', 'google-chrome', 'intel-power-gadget', 'istat-menus', 'iterm2', 'kindle', 'lastpass', 'nvalt', 'sizeup', 'slack', 'snagit', 'tunnelblick']
- name: 'Install Brew casks for Big Sur'
  homebrew_cask:
    name: ['little-snitch']
  when: ansible_distribution_major_version | int >= 11
- name: List asdf plugins installed
  shell: asdf plugin list
  register: asdf_plugin_list
  changed_when: false
  failed_when: false
- name: Install asdf plugins
  command: 'asdf plugin add {{ item }}'
  with_items: '{{ asdf_plugins }}'
  when: "item not in asdf_plugin_list.stdout"
- name: Update asdf plugins
  command: 'asdf plugin update {{ item }}'
  with_items: '{{ asdf_plugins }}'
  register: update_asdf_plugins
  changed_when: "'Your branch is up to date' not in update_asdf_plugins.stdout"
- name: Import asdf-nodejs pgp keys
  shell: bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-release-team-keyring'
  changed_when: false
- name: Install latest language versions
  shell: 'asdf install {{ item }} latest'
  register: asdf_language_version_install_result
  with_items: '{{ asdf_plugins }}'
  changed_when: "'is already installed' not in asdf_language_version_install_result.stdout"
- name: Set current language version to the latest
  shell: 'asdf global {{ item }} $(asdf latest {{ item }})'
  with_items: '{{ asdf_plugins }}'
  changed_when: false
- name: Install eslint
  npm:
    name: eslint
    global: yes
- name: Clone vim config repository
  git:
    dest: '{{ ansible_env.HOME }}/.vim'
    repo: 'ssh://git@github.com/f1sherman/dotvim.git'
- name: Link .vimrc
  file:
    dest: '{{ ansible_env.HOME }}/.vimrc'
    src: '{{ ansible_env.HOME }}/.vim/vimrc'
    state: link
- name: Create .vimtmp directory
  file:
    path: '{{ ansible_env.HOME }}/.vimtmp'
    state: directory
- name: Initialize vim and install/update plugins
  command: '{{ item }}'
  changed_when: false
  with_items:
    - vim +qall
    - vim +PlugUpdate +qall
    - vim +PlugUpgrade +qall
    - vim +PlugClean! +qall
- name: Check YouCompleteMe modification time
  stat:
    path: '{{ ansible_env.HOME }}/.vim/plugged/YouCompleteMe'
  register: youcompleteme
- name: Compile YouCompleteMe
  command: '{{ ansible_env.HOME }}/.vim/plugged/YouCompleteMe/install.py'
  when: ansible_date_time.epoch|float - youcompleteme.stat.mtime < 30 * 60
- name: Create projects directory
  file:
    path: '{{ ansible_env.HOME }}/projects'
    state: directory
- name: Install dotfiles
  copy:
    backup: yes
    dest: '{{ ansible_env.HOME }}/.{{ item }}'
    src: 'dotfiles/{{ item }}'
    mode: 0600
  with_items:
    - ackrc
    - bash_profile
    - gitattributes
    - gitconfig
    - gitignore
    - pryrc
    - rgignore
    - ripgreprc
    - tmux.conf
    - zpreztorc
    - zlogin
    - zshenv
    - zshrc
- name: Install FZF
  shell: '/usr/local/opt/fzf/install --all'
  changed_when: false
- name: Enable Dark Mode
  command: dark-mode on
  changed_when: false
- name: Clone prezto
  git:
    dest: '{{ ansible_env.HOME }}/.zprezto'
    repo: 'ssh://git@github.com/sorin-ionescu/prezto.git'
    recursive: yes
    update: yes
- name: Install prezto
  file:
    src: '{{item}}'
    dest: '{{ ansible_env.HOME }}/.{{ item | basename }}'
    state: link
  with_fileglob:
    - '{{ ansible_env.HOME }}/.zprezto/runcoms/^(README.md|zshrc|zpreztorc)'
- name: Set default shell to zsh
  user:
    name: '{{ ansible_env.USER }}'
    shell: /usr/local/bin/zsh
  become: yes
- name: Install sqlparse
  pip:
    name: sqlparse
    executable: pip3
- name: '{{ item.name }}'
  become: yes
  command: '{{ item.command }}'
  changed_when: false
  with_items:
    - { name: 'Disable the sound effects on boot', command: 'nvram SystemAudioVolume=" "' }
    - { name: 'Restart automatically if the computer freezes', command: 'systemsetup -setrestartfreeze on' }
    - { name: 'Display login window as name and password instead of list of users', command: 'defaults write /Library/Preferences/com.apple.loginwindow SHOWFULLNAME -bool true' }
    - { name: 'Disable guest account login', command: 'defaults write /Library/Preferences/com.apple.loginwindow GuestEnabled -bool false' }
    - { name: 'Disable hibernation (speeds up entering sleep mode)', command: 'pmset -a hibernatemode 0' }
    - { name: 'Disable the sudden motion sensor as it’s not useful for SSDs', command: 'pmset -a sms 0' }
    - { name: 'Show the /Volumes folder', command: 'chflags nohidden /Volumes' }
- name: '{{ item.name }}'
  command: '{{ item.command }}'
  changed_when: false
  with_items:
    - { name: 'Always show scrollbars', command: 'defaults write NSGlobalDomain AppleShowScrollBars -string "Always"' }
    - { name: 'Increase window resize speed for Cocoa applications', command: 'defaults write NSGlobalDomain NSWindowResizeTime -float 0.001' }
    - { name: 'Disable automatic termination of inactive apps', command: 'defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true' }
    - { name: 'Disable the “Are you sure you want to open this application?” dialog', command: 'defaults write com.apple.LaunchServices LSQuarantine -bool false' }
    - { name: 'Enable subpixel font rendering on non-Apple LCDs', command: 'defaults write NSGlobalDomain AppleFontSmoothing -int 2' }
    - { name: 'Require password to return from screensaver', command: 'defaults write com.apple.screensaver askForPassword -int 1' }
    - { name: 'Require password 3 seconds after sleep or screen saver begins', command: 'defaults write com.apple.screensaver askForPasswordDelay -int 3' }
    - { name: 'Avoid creating .DS_Store files on network volumes', command: 'defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true' }
    - { name: 'Preventing Time Machine from prompting to use new hard drives as backup volume', command: 'defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true' }
    - { name: 'Enable AirDrop over Ethernet and on unsupported Macs running Lion', command: 'defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true' }
    - { name: 'Only use UTF-8 in Terminal.app', command: 'defaults write com.apple.terminal StringEncodings -array 4' }
    - { name: 'Set the Pro theme by default in Terminal.app', command: 'defaults write com.apple.Terminal "Default Window Settings" -string "Pro"' }
    - { name: 'Set the Pro theme on startup in Terminal.app', command: 'defaults write com.apple.Terminal "Startup Window Settings" -string "Pro"' }
    - { name: 'Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app', command: 'defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false' }
    - { name: 'Enable the automatic update check', command: 'defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true' }
    - { name: 'Check for software updates every day instead of once a week', command: 'defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1' }
    - { name: 'Download newly available updates in background', command: 'defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1' }
    - { name: 'Install System data files & security updates', command: 'defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1' }
    - { name: 'Turn on app auto-update', command: 'defaults write com.apple.commerce AutoUpdate -bool true' }
    - { name: 'Allow the App Store to reboot machine on macOS updates', command: 'defaults write com.apple.commerce AutoUpdateRestartRequired -bool true' }
    - { name: 'Set timezone; type systemsetup -listtimezones for a list', command: 'systemsetup -settimezone "America/Chicago" > /dev/null' }
    - { name: 'Add a context menu item for showing the Web Inspector in web views', command: 'defaults write NSGlobalDomain WebKitDeveloperExtras -bool true' }
    - { name: 'Disable mouse acceleration', command: 'defaults write .GlobalPreferences com.apple.mouse.scaling -1' }
    - { name: 'Expand save panel by default', command: 'defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true' }
    - { name: 'Expand save panel by default (2)', command: 'defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true' }
    - { name: 'Expand print panel by default', command: 'defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true' }
    - { name: 'Expand print panel by default (2)', command: 'defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true' }
    - { name: 'Save to disk (not to iCloud) by default', command: 'defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false' }
    - { name: 'Automatically quit printer app once the print jobs complete', command: 'defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true' }
    - { name: 'Disable smart quotes as they’re annoying when typing code', command: 'defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false' }
    - { name: 'Disable smart dashes as they’re annoying when typing code', command: 'defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false' }
    - { name: 'Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app', command: 'defaults write com.apple.mail NSUserKeyEquivalents -dict-add "Send" -string "@\\U21a9"' }
    - { name: "Don't open Photos when a device is plugged in", command: 'defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true' }
    - { name: 'Disable the over-the-top focus ring animation', command: 'defaults write NSGlobalDomain NSUseAnimatedFocusRing -bool false' }
    - { name: 'Show amount of time VPN has been connected', command: 'defaults write com.apple.networkConnect VPNShowTime -int 1' }
    - { name: 'Setup menubar', command: 'defaults write com.apple.systemuiserver menuExtras -array "/Applications/Utilities/Keychain Access.app/Contents/Resources/Keychain.menu" "/System/Library/CoreServices/Menu Extras/VPN.menu" "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" "/System/Library/CoreServices/Menu Extras/AirPort.menu" "/System/Library/CoreServices/Menu Extras/Volume.menu" "/System/Library/CoreServices/Menu Extras/Battery.menu" "/System/Library/CoreServices/Menu Extras/Clock.menu" "/System/Library/CoreServices/Menu Extras/User.menu"' }
    - { name: 'Messages: Disable automatic emoji substitution (i.e. use plain text smileys)', command: 'defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool false' }
    - { name: 'Messages: Disable smart quotes as it’s annoying for messages that contain code', command: 'defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false' }
    - { name: 'Messages: Disable continuous spell checking', command: 'defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false' }
    - { name: 'SizeUp: Start SizeUp at login', command: 'defaults write com.irradiatedsoftware.SizeUp StartAtLogin -bool true' }
    - { name: 'SizeUp: Don’t show the preferences window on next start', command: 'defaults write com.irradiatedsoftware.SizeUp ShowPrefsOnNextStart -bool false' }
    - { name: 'Activity Monitor: Show the main window when launching', command: 'defaults write com.apple.ActivityMonitor OpenMainWindow -bool true' }
    - { name: 'Activity Monitor: Visualize CPU usage in the Dock icon', command: 'defaults write com.apple.ActivityMonitor IconType -int 5' }
    - { name: 'Activity Monitor: Show all processes', command: 'defaults write com.apple.ActivityMonitor ShowCategory -int 0' }
    - {
        name: 'Activity Monitor: Set columns',
        command: "
          defaults write com.apple.ActivityMonitor \"UserColumnsPerTab v6.0\" -dict
          '0' '( Command, CPUUsage, CPUTime, Threads, IdleWakeUps, PID, UID )'
          '1' '( Command, ResidentSize, anonymousMemory, compressedMemory, PurgeableMem, Threads, Ports, PID, UID)'
          '2' '( Command, PowerScore, 12HRPower, AppSleep, graphicCard, powerAssertion, UID )'
          '3' '( Command, bytesWritten, bytesRead, Architecture, PID, UID )'
          '4' '( Command, txBytes, rxBytes, txPackets, rxPackets, PID, UID )'
          '5' '( Name, LastHour, LastDay, LastWeek, LastMonth )'
          '6' '( Command, GPUUsage, GPUTime, PID, UID )'
        "
      }
    - {
        name: 'Activity Monitor: Set column sorts',
        command: "
          defaults write com.apple.ActivityMonitor \"UserColumnSortPerTab\" -dict
          '0' '{ direction = 0; sort = CPUUsage; }'
          '1' '{ direction = 0; sort = ResidentSize; }'
          '2' '{ direction = 0; sort = 12HRPower; }'
          '3' '{ direction = 0; sort = bytesWritten; }'
          '4' '{ direction = 0; sort = txBytes; }'
          '5' '{ direction = 0; sort = Name; }'
          '6' '{ direction = 0; sort = GPUUsage; }'
        "
      }
    - { name: 'Disable default backwards scrolling', command: 'defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false' }
    - { name: 'Trackpad: enable clicking for this user', command: 'defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true' }
    - { name: 'Trackpad: enable tap to click for this user', command: 'defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1' }
    - { name: 'Trackpad: enable tap to click for the login screen', command: 'defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1' }
    - { name: 'Improve quality for bluetooth headphones and headsets', command: 'defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40' }
    - { name: 'Enable full keyboard access for all controls (e.g. enable Tab in modal dialogs)', command: 'defaults write NSGlobalDomain AppleKeyboardUIMode -int 3' }
    - { name: 'Disable press-and-hold for keys in favor of key repeat', command: 'defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false' }
    - { name: 'Set a blazingly fast keyboard repeat rate', command: 'defaults write NSGlobalDomain KeyRepeat -int 2' }
    - { name: 'Set a blazingly fast initial keyboard repeat rate', command: 'defaults write NSGlobalDomain InitialKeyRepeat -int 15' }
    - { name: 'Finder: Show all filename extensions', command: 'defaults write NSGlobalDomain AppleShowAllExtensions -bool true' }
    - { name: 'Finder: Show status bar by default', command: 'defaults write com.apple.finder ShowStatusBar -bool true' }
    - { name: 'Finder: Display full POSIX path as window title', command: 'defaults write com.apple.finder _FXShowPosixPathInTitle -bool true' }
    - { name: 'Finder: Show path bar', command: 'defaults write com.apple.finder ShowPathbar -bool true' }
    - { name: 'Finder: Set Downloads as the default location for new windows', command: 'defaults write com.apple.finder NewWindowTarget -string "PfLo"' }
    - { name: 'Finder: Set Downloads as the default location for new windows (2)', command: 'defaults write com.apple.finder NewWindowTargetPath -string "file://{{ ansible_env.HOME }}/Downloads/"' }
    - { name: 'Finder: disable window animations and Get Info animations', command: 'defaults write com.apple.finder DisableAllAnimations -bool true' }
    - { name: 'Finder: Disable the warning when changing a file extension', command: 'defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false' }
    - { name: 'Finder: Show all files (i.e. /tmp, /usr, /var directories) in Finder', command: 'defaults write com.apple.Finder AppleShowAllFiles YES' }
    - { name: 'Finder: Use list view in all Finder windows by default', command: 'defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"' }
    - { name: 'Finder: Allow text selection in Quick Look/Preview in Finder by default', command: 'defaults write com.apple.finder QLEnableTextSelection -bool true' }
    - { name: 'Finder: Show icons for external hard drives on the desktop', command: 'defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true' }
    - { name: 'Finder: Show icons for internal hard drives on the desktop', command: 'defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true' }
    - { name: 'Finder: Show icons for network drives on the desktop', command: 'defaults write com.apple.finder ShowMountedServersOnDesktop -bool true' }
    - { name: 'Finder: Show icons for removable media on the desktop', command: 'defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true' }
    - { name: 'Finder: Show the ~/Library folder', command: 'chflags nohidden ~/Library' }
    - { name: 'Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)', command: 'defaults write com.apple.screencapture type -string "png"' }
    - { name: "Remove all (default) app icons from the dock since I don't use the dock", command: 'defaults write com.apple.dock persistent-apps -array' }
    - { name: 'Don’t animate opening applications from the Dock', command: 'defaults write com.apple.dock launchanim -bool false' }
    - { name: 'Don’t show Dashboard as a Space', command: 'defaults write com.apple.dock dashboard-in-overlay -bool true' }
    - { name: 'Disable the dashboard', command: 'defaults write com.apple.dashboard mcx-disabled -boolean true' }
    - { name: 'Remove the auto-hiding Dock delay', command: 'defaults write com.apple.Dock autohide-delay -float 0' }
    - { name: 'Remove the animation when hiding/showing the Dock', command: 'defaults write com.apple.dock autohide-time-modifier -float 0' }
    - { name: 'Automatically hide and show the Dock', command: 'defaults write com.apple.dock autohide -bool true' }
    - { name: 'Make Dock icons of hidden applications translucent', command: 'defaults write com.apple.dock showhidden -bool true' }
    - { name: 'Show only open applications in the Dock', command: 'defaults write com.apple.dock static-only -bool true' }
    - { name: 'Spaces span displays instead of having separate spaces per display', command: 'defaults write com.apple.spaces spans-displays -bool TRUE' }
    - { name: 'Safari: don’t send search queries to Apple', command: 'defaults write com.apple.Safari UniversalSearchEnabled -bool false' }
    - { name: 'Safari: Remove useless icons from Safari’s bookmarks bar', command: 'defaults write com.apple.Safari ProxiesInBookmarksBar "()"' }
    - { name: 'Safari: Enable the Develop menu and the Web Inspector', command: 'defaults write com.apple.Safari IncludeDevelopMenu -bool true' }
    - { name: 'Safari: Enable the Develop menu and the Web Inspector (2)', command: 'defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true' }
    - { name: 'Safari: Enable the Develop menu and the Web Inspector (3)', command: 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true' }
    - { name: 'Safari: Press Tab to highlight each item on a web page', command: 'defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true' }
    - { name: 'Safari: Press Tab to highlight each item on a web page (2)', command: 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true' }
    - { name: 'Safari: Show the full URL in the address bar (note: this still hides the scheme)', command: 'defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true' }
    - { name: 'Safari: Prevent from opening ‘safe’ files automatically after downloading', command: 'defaults write com.apple.Safari AutoOpenSafeDownloads -bool false' }
    - { name: 'Safari: Hide bookmarks bar by default', command: 'defaults write com.apple.Safari ShowFavoritesBar -bool false' }
    - { name: 'Safari: Enable debug menu', command: 'defaults write com.apple.Safari IncludeInternalDebugMenu -bool true' }
    - { name: 'Safari: Add a context menu item for showing the Web Inspector in web views', command: 'defaults write NSGlobalDomain WebKitDeveloperExtras -bool true' }
    - { name: 'Brave: Disable the all too sensitive backswipe on trackpads', command: 'defaults write com.brave.Browser AppleEnableSwipeNavigateWithScrolls -bool false' }
    - { name: 'Chrome: Disable the all too sensitive backswipe on trackpads', command: 'defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false' }
    - { name: 'Chrome: Disable the all too sensitive backswipe on trackpads (2)', command: 'defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false' }
    - { name: 'Brave: Disable the all too sensitive backswipe on Magic Mouse', command: 'defaults write com.brave.Browser AppleEnableMouseSwipeNavigateWithScrolls -bool false' }
    - { name: 'Chrome: Disable the all too sensitive backswipe on Magic Mouse', command: 'defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false' }
    - { name: 'Chrome: Disable the all too sensitive backswipe on Magic Mouse (2)', command: 'defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false' }
    - { name: 'Brave: Use the system-native print preview dialog', command: 'defaults write com.brave.Browser DisablePrintPreview -bool true' }
    - { name: 'Chrome: Use the system-native print preview dialog', command: 'defaults write com.google.Chrome DisablePrintPreview -bool true' }
    - { name: 'Chrome: Use the system-native print preview dialog (2)', command: 'defaults write com.google.Chrome.canary DisablePrintPreview -bool true' }
    - { name: 'Brave: Expand the print dialog by default', command: 'defaults write com.brave.Browser PMPrintingExpandedStateForPrint2 -bool true' }
    - { name: 'Chrome: Expand the print dialog by default', command: 'defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true' }
    - { name: 'Chrome: Expand the print dialog by default (2)', command: 'defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true' }
- name: Install Pi-hole disable script
  copy:
    backup: yes
    dest: '/usr/local/bin/disable-pihole'
    src: 'bin/disable-pihole'
    mode: 0755
  become: true
- name: Install flushdns script
  copy:
    backup: yes
    dest: '/usr/local/bin/flushdns'
    src: 'bin/flushdns'
    mode: 0744
  become: true
- name: Allow flushdns to be run as root without password
  lineinfile:
   path: /etc/sudoers
   state: present
   regexp: 'flushdns'
   line: '%admin    ALL = (root) NOPASSWD: /usr/local/bin/flushdns'
  become: true
